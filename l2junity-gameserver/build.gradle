apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'idea'

defaultTasks('distZip')

sourceCompatibility = '1.8'

sourceSets {
	scripts {
		java {
			srcDir('dist/game/data/scripts')
		}
	}
	test {
  	  java {
			srcDir('dist/game/data/scripts')
		}
	}
}

dependencies {
	compile project(':l2junity-commons')
	compile project(':l2junity-geodriver')
	compile project(':l2junity-network')
	compile project(':l2junity-mmocore')
	
	compile(group: 'com.sun.mail', name: 'javax.mail', version: '1.5.6')
	compile(group: 'it.sauronsoftware.cron4j', name: 'cron4j', version: '2.2.5')
	compile(group: 'net.objecthunter', name: 'exp4j', version: '0.4.8')

	runtime(group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.1')
	runtime(group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1')
	runtime(group: 'org.eclipse.jdt.core.compiler', name: 'ecj', version: '4.4.2')

	testCompile (group: 'junit', name: 'junit', version: '4.12')
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

jar {
	archiveName = 'l2junity-game.jar'
	exclude('**/dbinstaller/**')
	exclude('**/loginserver/**')
	exclude('**/accountmanager/**')
	exclude('**/gsregistering/**')
	manifest {
		attributes(
			'Class-Path': configurations.runtime.collect({ '../libs/' + it.getName() }).join(' '),
			'Main-Class': 'org.l2junity.gameserver.GameServer')
	}
}

task loginJar(type: Jar, dependsOn: classes) {
	from(sourceSets.main.output)
	archiveName = 'l2junity-login.jar'
	exclude('**/dbinstaller/**')
	manifest {
		attributes(
			'Class-Path': configurations.runtime.collect({ '../libs/' + it.getName() }).join(' '),
			'Main-Class': 'org.l2junity.loginserver.L2LoginServer')
	}
}

task dbInstLsJar(type: Jar, dependsOn: classes) {
	from(sourceSets.main.output)
	archiveName = 'dbinst_ls.jar'
	include '**/dbinstaller/**'
	include '**/images/**'
	include '**/util/**'
	include '**/SQLFilter**'
	exclude '**/LauncherGS*'
	manifest {
		attributes(
			'Class-Path': configurations.runtime.collect({ '../libs/' + it.getName() }).join(' '),
			'Main-Class': 'org.l2junity.tools.dbinstaller.LauncherLS')
	}
}

task dbInstGsJar(type: Jar, dependsOn: classes) {
	from(sourceSets.main.output)
	archiveName = 'dbinst_gs.jar'
	include('**/dbinstaller/**')
	include('**/images/**')
	include('**/util/**')
	include('**/SQLFilter**')
	exclude('**/LauncherLS*')
	manifest {
		attributes(
			'Class-Path': configurations.runtime.collect({ '../libs/' + it.getName() }).join(' '),
			'Main-Class': 'org.l2junity.tools.dbinstaller.LauncherGS')
	}
}

artifacts {
	archives loginJar, dbInstLsJar, dbInstGsJar
}

distributions {
	main {
		contents {
			from('dist')
			into('libs') {
				from(configurations.runtime)
			}
			into('game') {
				from(jar)
			}
			into('login') {
				from(loginJar)
			}
			into('tools') {
				from(dbInstLsJar)
				from(dbInstGsJar)
			}
		}
	}
}

task generateLoginConfigs(type: JavaExec, dependsOn: 'classes') {
    main = 'org.l2junity.loginserver.config.LoginConfigGenerator'
    classpath = sourceSets.main.runtimeClasspath
}

task generateGameConfigs(type: JavaExec, dependsOn: 'classes') {
    main = 'org.l2junity.gameserver.config.GameConfigGenerator'
    classpath = sourceSets.main.runtimeClasspath
}