apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-eclipse'
apply plugin: 'propdeps-idea'
apply plugin: 'application'
apply plugin: 'antlr'

run.workingDir = new File("./dist")
mainClassName = "org.l2junity.gameserver.GameServer"

applicationDefaultJvmArgs = [
		"-server",
		"-Xms2G",
		"-Xmx8G"
]

defaultTasks 'assemble'
distTar.enabled = false
bootRepackage.enabled = false

sourceSets {
	scripts {
		java {
			srcDir('dist/data/scripts')
		}
		compileClasspath += main.output + sourceSets.main.runtimeClasspath
		runtimeClasspath += main.output + sourceSets.main.runtimeClasspath
	}
}

dependencies {
	provided('org.projectlombok:lombok:+')
	provided files("${System.properties['java.home']}/../lib/tools.jar")
	antlr('org.antlr:antlr4:+')
	provided project(':commons')
	provided project(':geodriver')
	provided project(':network')

	compile('com.googlecode.htmlcompressor:htmlcompressor:1.5.2')
	compile('com.google.javascript:closure-compiler:v20151216')
	compile('com.yahoo.platform.yui:yuicompressor:2.4.8')

	compile(group: 'com.sun.mail', name: 'javax.mail', version: '1.5.6')
	compile(group: 'it.sauronsoftware.cron4j', name: 'cron4j', version: '2.2.5')
	compile(group: 'net.objecthunter', name: 'exp4j', version: '0.4.8')

	runtime(group: 'org.eclipse.jdt.core.compiler', name: 'ecj', version: '4.4.2')
}

configurations {
	compile.exclude group: 'ch.qos.logback'
}

generateGrammarSource {
	arguments += ["-lib", "src/main/antlr/org/l2junity/gameserver/data/txt/gen"]
	arguments += ["-package", "org.l2junity.gameserver.data.txt.gen"]
}

generateGrammarSource.doLast {
	copy {
		from("${buildDir}/generated-src/antlr/main")
		exclude '**/*.tokens'
		into('src/main/java/')
	}
	delete "${buildDir}/generated-src"
}

compileJava {
	dependsOn generateGrammarSource
}

distZip {
	from('dist/configs') {
		into(baseName + '/bin/configs')
		exclude('**/*.properties')
	}
	from('dist/data') {
		into(baseName + '/bin/data')
	}
	from('dist/sql') {
		into(baseName + '/sql')
	}
}

task createStartScripts(type: CreateStartScripts) {
	unixStartScriptGenerator.template = resources.text.fromFile('../gradle/customUnixStartScript.txt');
	windowsStartScriptGenerator.template = resources.text.fromFile('../gradle/customWindowsStartScript.txt');
}